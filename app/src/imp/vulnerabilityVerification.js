// checks if the vulnerabilities are mitigated
const bubbleTxt = require('../helpers/bubbleTxt.js')

const vulnerabilityArray = []
let result = ''
let mitigatedVulnerabilities = 0

/**
 * checks if the vulnerabilities are mitigated
 *
 * @param {Object} cy cytoscape instance
 */
module.exports = function vulnerabilityVerification (cy) {
  cy.elements().addClass('faded')

  // highlights all vulnerability and mechanism nodes
  cy.nodes().map(node => {
    if (node.data().asto.concept === 'vulnerability') {
      node.removeClass('faded')
      node.addClass('attention')
      vulnerabilityArray.push(node)
    }
    if (node.data().asto.concept === 'mechanism') {
      node.removeClass('faded')
      node.addClass('protect')
    }
  })

  // checks if a vulnerability node is connected to a mechanism node
  vulnerabilityArray.map(vulnerability => {
    const neighbor = vulnerability.neighborhood()
    neighbor.map(type => {
      if (type.data().hasOwnProperty('asto') === true) {
        if (type.data().asto.concept === 'mechanism') {
          result = `${result} • Vulnerability ${
            vulnerability.data().id
          } mitigated by Mechanism ${type.data().id}\n`
          mitigatedVulnerabilities += 1
        }
      }
    })
  })

  result = `${result}\n • Vulnerabilities total: ${vulnerabilityArray.length}\n`
  result = `${result} • Mitigated total: ${mitigatedVulnerabilities}\n`
  bubbleTxt(result)

  if (vulnerabilityArray.length <= mitigatedVulnerabilities) {
    bubbleTxt('all vulnerabilities mitigated 🎉')
  }
}
